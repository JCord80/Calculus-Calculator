import sympy as sp
import tkinter as tk

window = tk.Tk()
window.title("Calculator")

import numpy as np
import matplotlib.pyplot as plt

def graph():
    x, y, t, r, theta = sp.symbols('x y t r theta')
    if "y" not in expr["text"]:
        function_singlevar = expr["text"]
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        xvals = np.linspace(xmin, xmax, 10000000)
        lambdified = sp.lambdify(x, function_singlevar)
        yvals = lambdified(xvals)
        plt.figure(figsize=(8, 6))
        plt.plot(xvals, yvals)
        plt.xlim(xmin, xmax)
        plt.ylim(ymin, ymax)
        plt.title("Graph of the Function")
        plt.xlabel("x")
        plt.ylabel("f(x)")
        plt.grid(True)
        plt.show()
    elif "y" in expr["text"]:
        function_multivar = expr["text"]
        xmin = -10
        xmax = 10
        ymin = -10
        ymax = 10
        zmin = -10
        zmax = 10
        xvals = np.linspace(xmin, xmax, 100)
        yvals = np.linspace(ymin, ymax, 100)
        xmesh, ymesh = np.meshgrid(xvals, yvals)
        lambdified = sp.lambdify((x, y), function_multivar)
        zvals = lambdified(xmesh, ymesh)
        fig = plt.figure(figsize=(10, 8))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(xmesh, ymesh, zvals)
        ax.set_xlim(xmin, xmax)
        ax.set_ylim(ymin, ymax)
        ax.set_zlim(zmin, zmax)
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.set_zlabel("z")
        plt.show()
    else:
        print("You can only plot in 2 or 3 dimensions")


def add_x():
    expr["text"] = expr["text"]+"x"
def add_y():
    expr["text"] = expr["text"]+"y"
def add_period():
    expr["text"] = expr["text"]+"z"
def add_e():
    expr["text"] = expr["text"]+"e"
def add_1():
    expr["text"] = expr["text"]+"1"
def add_2():
    expr["text"] = expr["text"]+"2"
def add_3():
    expr["text"] = expr["text"]+"3"
def add_4():
    expr["text"] = expr["text"]+"4"
def add_5():
    expr["text"] = expr["text"]+"5"
def add_6():
    expr["text"] = expr["text"]+"6"
def add_7():
    expr["text"] = expr["text"]+"7"
def add_8():
    expr["text"] = expr["text"]+"8"
def add_9():
    expr["text"] = expr["text"]+"9"
def add_0():
    expr["text"] = expr["text"]+"0"
def integrate():
    function = sp.sympify(expr["text"])
    answer["text"] = sp.integrate(function)
    expr["text"] = ""
def differentiate():
    if ("e") in expr["text"]:
        expr["text"]=expr["text"].replace("e", "E")
    function = sp.sympify(expr["text"])
    answer["text"] = sp.diff(function)
    expr["text"] = ""

def sin():
    win1 = tk.Tk()
    win1.title = "Sine window"


    def add_x():
        expr1["text"] = expr1["text"]+"x"
    def add_y():
        expr1["text"] = expr1["text"]+"y"
    def add_period():
        expr1["text"] = expr1["text"]+"z"
    def add_e():
        expr1["text"] = expr1["text"]+"e"
    def add_1():
        expr1["text"] = expr1["text"]+"1"
    def add_2():
        expr1["text"] = expr1["text"]+"2"
    def add_3():
        expr1["text"] = expr1["text"]+"3"
    def add_4():
        expr1["text"] = expr1["text"]+"4"
    def add_5():
        expr1["text"] = expr1["text"]+"5"
    def add_6():
        expr1["text"] = expr1["text"]+"6"
    def add_7():
        expr1["text"] = expr1["text"]+"7"
    def add_8():
        expr1["text"] = expr1["text"]+"8"
    def add_9():
        expr1["text"] = expr1["text"]+"9"
    def add_0():
        expr1["text"] = expr1["text"]+"0"
    def mult():
        expr1["text"] = expr1["text"]+"*"
    
    def add_pi():
        expr1["text"] = expr1["text"]+"π"

    def add():
        expr1["text"] = expr1["text"]+"+"

    def minus():
        expr1["text"] = expr1["text"]+"-"

    def divide():
        expr1["text"] = expr1["text"]+"/"
    def enter():
        global save
        save = f"sin({expr1["text"]})"
        win1.quit()
        win1.destroy()
    
    box = tk.Frame(master = win1)
    zomb = tk.Label(master = box,text = "Input Number Inside of Sin( ):")
    expr1 = tk.Label(master = box,text = "")
    nums = tk.Frame(master = win1)

    nums.rowconfigure([0,1,2,3,4],weight = 1, minsize = 75)
    nums.columnconfigure([0,1,2,3],weight = 1, minsize = 75)

    butx = tk.Button(master=nums, text = "x", command = add_x)
    buty = tk.Button(master=nums, text = "y", command = add_y)
    butperiod = tk.Button(master=nums, text = ".", command = add_period)
    bute = tk.Button(master=nums, text = "e", command = add_e)
    but1 = tk.Button(master = nums, text = "1",command = add_1)
    but2 = tk.Button(master = nums, text = "2",command = add_2)
    but3 = tk.Button(master = nums, text = "3",command = add_3)
    but4 = tk.Button(master = nums, text = "4",command = add_4)
    but5 = tk.Button(master = nums, text = "5",command = add_5)
    but6 = tk.Button(master = nums, text = "6",command = add_6)
    but7 = tk.Button(master = nums, text = "7",command = add_7)
    but8 = tk.Button(master = nums, text = "8",command = add_8)
    but9 = tk.Button(master = nums, text = "9",command = add_9)
    but0 = tk.Button(master = nums, text = "0",command = add_0)
    butsubtr = tk.Button(master = nums, text = "-", command = minus)
    butdiv = tk.Button(master = nums, text = "/", command = divide)
    butmult = tk.Button(master = nums, text = "*", command  = mult)
    butadd = tk.Button(master = nums, text = "+", command  = add)
    butpi = tk.Button(master = nums,text = "π",command = add_pi)
    butenter = tk.Button(master = nums, text = "Enter",command = enter)

    box.pack()
    zomb.pack()
    expr1.pack()
    nums.pack()

    b = [butx,buty,butperiod,bute,but1,but2,but3,but4,but5,but6,but7,but8,but9,but0,butsubtr,butdiv,butmult,butadd,butpi,butenter]
    i = 0
    for k in range(5):
        for c in range(4):
            b[i].grid(row = k, column = c, sticky = "nsew")
            i += 1
    
    win1.mainloop()
    expr["text"] = expr["text"]+ save

def cos():
    expr["text"] = expr["text"]+"cos(x)"

def mult():
    expr["text"] = expr["text"]+"*"

def add():
    expr["text"] = expr["text"]+"+"

def minus():
    expr["text"] = expr["text"]+"-"

def divide():
    expr["text"] = expr["text"]+"/"


def backspace(event):
    expr["text"] = expr["text"][0:len(expr["text"])-1]


def key(event):
    if event.char.isdigit() == True:
        expr["text"] += event.char
    elif event.char == "x":
        expr["text"] += event.char

def enter():
    save = expr["text"]
    if "x" in save:
        answer["text"] = "Can't Evaluate"
    else:
        z = sp.symbols('z')
        y = sp.sympify(save)
        func = sp.lambdify(z,y)
        answer["text"] = str(func(0))
        expr["text"] = ""

def clear():
    expr["text"] = ""


frame1 = tk.Frame(master = window)
label = tk.Label(master = frame1,text = "Answer:")
answer = tk.Label(master = frame1,text = "")
label2 = tk.Label(master = frame1,text = "Expression:")
expr = tk.Label(master = frame1,text = "")

frame2 = tk.Frame(master = window)
frame2.rowconfigure([0,1,2,3,4],weight = 1, minsize = 75)
frame2.columnconfigure([0,1,2,3,4],weight = 1, minsize = 75)


butx = tk.Button(master=frame2, text = "x", command = add_x)
buty = tk.Button(master=frame2, text = "y", command = add_y)
butperiod = tk.Button(master=frame2, text = ".", command = add_period)
bute = tk.Button(master=frame2, text = "e", command = add_e)
but1 = tk.Button(master = frame2, text = "1",command = add_1)
but2 = tk.Button(master = frame2, text = "2",command = add_2)
but3 = tk.Button(master = frame2, text = "3",command = add_3)
but4 = tk.Button(master = frame2, text = "4",command = add_4)
but5 = tk.Button(master = frame2, text = "5",command = add_5)
but6 = tk.Button(master = frame2, text = "6",command = add_6)
but7 = tk.Button(master = frame2, text = "7",command = add_7)
but8 = tk.Button(master = frame2, text = "8",command = add_8)
but9 = tk.Button(master = frame2, text = "9",command = add_9)
butsin = tk.Button(master = frame2, text = "sin(x)", command = sin)
butcos = tk.Button(master = frame2, text = "cos(x)", command = cos)
butmult = tk.Button(master = frame2, text = "*", command  = mult)
butadd = tk.Button(master = frame2, text = "+", command  = add)
butw = tk.Button(master = frame2, text = "Integrate", command = integrate)
but0 = tk.Button(master = frame2, text = "0",command = add_0)
butd = tk.Button(master = frame2, text = "Differentiate",command = differentiate)
butclear = tk.Button(master = frame2, text = "Clear",command = clear)
ent = tk.Button(master = frame2, text = "Enter", command = enter)
butsubtr = tk.Button(master = frame2, text = "-", command = minus)
butdiv = tk.Button(master = frame2, text = "/", command = divide)
butgraph = tk.Button(master = frame2, text = "Graph", command = graph)

frame1.pack()
label2.pack()
expr.pack()
label.pack()

answer.pack()

frame2.pack(side = tk.LEFT)
frame3 = tk.Frame(master = window,height = 75, width = 100)
frame3.pack(side=tk.LEFT)


b = [butcos, butsin, butgraph, butclear, butdiv, butx, but1, but2, but3, butmult, buty, but4, but5, but6, butsubtr,butperiod, but7, but8, but9, butadd,bute, butw, but0, butd, ent]
i = 0
for k in range(5):
    for c in range(5):
        b[i].grid(row = k, column = c, sticky = "nsew")
        i += 1



window.bind("<BackSpace>",backspace)
window.bind("<Key>", key)

window.mainloop()